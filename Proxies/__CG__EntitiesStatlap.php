<?php

namespace Proxies\__CG__\Entities;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Statlap extends \Entities\Statlap implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Entities\\Statlap' . "\0" . 'id', '' . "\0" . 'Entities\\Statlap' . "\0" . 'oldalcim', '' . "\0" . 'Entities\\Statlap' . "\0" . 'slug', '' . "\0" . 'Entities\\Statlap' . "\0" . 'szoveg', '' . "\0" . 'Entities\\Statlap' . "\0" . 'seodescription', '' . "\0" . 'Entities\\Statlap' . "\0" . 'created', '' . "\0" . 'Entities\\Statlap' . "\0" . 'lastmod', '' . "\0" . 'Entities\\Statlap' . "\0" . 'oldurl', 'locale', '' . "\0" . 'Entities\\Statlap' . "\0" . 'translations'];
        }

        return ['__isInitialized__', '' . "\0" . 'Entities\\Statlap' . "\0" . 'id', '' . "\0" . 'Entities\\Statlap' . "\0" . 'oldalcim', '' . "\0" . 'Entities\\Statlap' . "\0" . 'slug', '' . "\0" . 'Entities\\Statlap' . "\0" . 'szoveg', '' . "\0" . 'Entities\\Statlap' . "\0" . 'seodescription', '' . "\0" . 'Entities\\Statlap' . "\0" . 'created', '' . "\0" . 'Entities\\Statlap' . "\0" . 'lastmod', '' . "\0" . 'Entities\\Statlap' . "\0" . 'oldurl', 'locale', '' . "\0" . 'Entities\\Statlap' . "\0" . 'translations'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Statlap $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getOldalcim()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOldalcim', []);

        return parent::getOldalcim();
    }

    /**
     * {@inheritDoc}
     */
    public function getShowOldalcim()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShowOldalcim', []);

        return parent::getShowOldalcim();
    }

    /**
     * {@inheritDoc}
     */
    public function setOldalcim($adat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOldalcim', [$adat]);

        return parent::setOldalcim($adat);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($adat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$adat]);

        return parent::setSlug($adat);
    }

    /**
     * {@inheritDoc}
     */
    public function getSzoveg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSzoveg', []);

        return parent::getSzoveg();
    }

    /**
     * {@inheritDoc}
     */
    public function setSzoveg($adat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSzoveg', [$adat]);

        return parent::setSzoveg($adat);
    }

    /**
     * {@inheritDoc}
     */
    public function getSeodescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSeodescription', []);

        return parent::getSeodescription();
    }

    /**
     * {@inheritDoc}
     */
    public function getShowSeodescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShowSeodescription', []);

        return parent::getShowSeodescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setSeodescription($adat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSeodescription', [$adat]);

        return parent::setSeodescription($adat);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastmod()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastmod', []);

        return parent::getLastmod();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function getOldurl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOldurl', []);

        return parent::getOldurl();
    }

    /**
     * {@inheritDoc}
     */
    public function setOldurl($u)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOldurl', [$u]);

        return parent::setOldurl($u);
    }

    /**
     * {@inheritDoc}
     */
    public function getTranslations()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTranslations', []);

        return parent::getTranslations();
    }

    /**
     * {@inheritDoc}
     */
    public function addTranslation(\Entities\StatlapTranslation $t)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTranslation', [$t]);

        return parent::addTranslation($t);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTranslation(\Entities\StatlapTranslation $t)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTranslation', [$t]);

        return parent::removeTranslation($t);
    }

    /**
     * {@inheritDoc}
     */
    public function getLocale()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLocale', []);

        return parent::getLocale();
    }

    /**
     * {@inheritDoc}
     */
    public function setLocale($locale)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLocale', [$locale]);

        return parent::setLocale($locale);
    }

}
